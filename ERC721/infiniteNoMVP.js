var Web3 = require("web3");
var api = require('etherscan-api').init('KXX4T9HFVXGFZ5ZV1B3MXXG7RSSKWRD3DC');
var fetch = require('node-fetch');
var ENS = require('ethereum-ens');

const ethNetwork = 'https://mainnet.infura.io/v3/d7f30da03a734567a801120b36cc7f6a';
const web3 = new Web3(new Web3.providers.HttpProvider(ethNetwork));

var ens = new ENS(web3);

const ERC721Abi = [{"inputs":[{"internalType":"string","name":"baseURI","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"ApprovalToCurrentOwner","type":"error"},{"inputs":[],"name":"ApproveToCaller","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[],"name":"OwnerIndexOutOfBounds","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"TokenIndexOutOfBounds","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"totalMinted","type":"uint256"}],"name":"Minted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"MAX_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_newPrice","type":"uint256"}],"name":"changePrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"flipSale","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_count","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"saleOpen","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"baseURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}];
const ERC1155Abi = [{"inputs":[{"internalType":"string","name":"uri_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}];

const SecurityLibraries = ["contract ERC20", "interface IERC20", "library SafeERC20", "contract TokenTimelock", "interface IERC20Metadata", "abstract contract ERC20Wrapper", "abstract contract ERC20VotesComp", "abstract contract ERC20Votes", "abstract contract ERC20Snapshot", "abstract contract ERC20Pausable", "abstract contract ERC20FlashMint", "abstract contract ERC20Capped", "abstract contract ERC20Burnable", "interface IERC721Receiver", "interface IERC721", "contract ERC721", "contract ERC721Holder", "interface IERC721Metadata", "interface IERC721Enumerable", "abstract contract ERC721URIStorage", "abstract contract ERC721Royalty", "abstract contract ERC721Pausable", "abstract contract ERC721Enumerable", "abstract contract ERC721Burnable", "interface IERC1155Receiver", "interface IERC1155", "contract ERC1155", "abstract contract ERC1155Receiver", "contract ERC1155Holder", "interface IERC1155MetadataURI", "abstract contract ERC1155URIStorage", "abstract contract ERC1155Supply", "abstract contract ERC1155Pausable", "abstract contract ERC1155Burnable", "library Timers", "library Strings", "library StorageSlot", "abstract contract Multicall", "library Create2", "library Counters", "abstract contract Context", "library Checkpoints", "library Base64", "library Arrays", "library Address", "library EnumerableSet", "library EnumerableMap", "library DoubleEndedQueue", "library BitMaps", "library SignedSafeMath", "library SignedMath", "library SafeMath", "library SafeMath", "library Math", "interface IERC1820Registry", "interface IERC1820Implementer", "interface IERC165", "contract ERC1820Implementer", "abstract contract ERC165Storage", "library ERC165Checker", "abstract contract ERC165", "contract RefundEscrow", "contract Escrow", "abstract contract ConditionalEscrow", "abstract contract EIP712", "library SignatureChecker", "library MerkleProof", "library ECDSA", "abstract contract ReentrancyGuard", "abstract contract PullPayment", "abstract contract Pausable", "abstract contract Proxy", "library Clones", "abstract contract UUPSUpgradeable", "abstract contract Initializable", "contract TransparentUpgradeableProxy", "contract ProxyAdmin", "contract TransparentUpgradeableProxy", "contract ProxyAdmin", "contract UpgradeableBeacon", "interface IBeacon", "contract BeaconProxy", "abstract contract ERC1967Upgrade", "contract ERC1967Proxy", "contract MinimalForwarder", "abstract contract ERC2771Context", "contract TimelockController", "abstract contract IGovernor", "abstract contract Governor", "abstract contract Votes", "interface IVotes", "abstract contract IGovernorTimelock", "abstract contract GovernorVotesQuorumFraction", "abstract contract GovernorVotesComp", "abstract contract GovernorVotes", "abstract contract GovernorTimelockControl", "abstract contract GovernorTimelockCompound", "abstract contract GovernorSettings", "abstract contract GovernorProposalThreshold", "abstract contract GovernorPreventLateQuorum", "abstract contract GovernorCountingSimple", "abstract contract IGovernorCompatibilityBravo", "abstract contract GovernorCompatibilityBravo", "contract VestingWallet", "contract PaymentSplitter", "abstract contract CrossChainEnabled", "abstract contract CrossChainEnabledPolygonChild", "library LibOptimism", "abstract contract CrossChainEnabledOptimism", "library LibArbitrumL2", "library LibArbitrumL1", "abstract contract CrossChainEnabledArbitrumL2", "abstract contract CrossChainEnabledArbitrumL1", "library LibAMB", "contract CrossChainEnabledAMB", "abstract contract Ownable", "interface IAccessControlEnumerable", "interface IAccessControl", "abstract contract AccessControlEnumerable", "abstract contract AccessControlCrossChain", "abstract contract AccessControl"];


// Snippets
async function getContractSourceCode(collectionAddress) { // Implemented
    return await fetch(`https://api.etherscan.io/api?module=contract&action=getsourcecode&address=${collectionAddress}&apikey=KXX4T9HFVXGFZ5ZV1B3MXXG7RSSKWRD3DC`).then(async res => {
        return await res.json().then(res => {
            return res["result"][0]["SourceCode"];
        });
    })
}

async function getTokenMintGasSpent(collectionAddress, tokenId) { // Implemented
    return await api.log.getLogs(collectionAddress, 0, 99999999, "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", "AND", "0x0000000000000000000000000000000000000000000000000000000000000000", "AND", undefined, "AND", web3.utils.padLeft(web3.utils.numberToHex(tokenId), 64))
    .then(json => {
        return web3.utils.hexToNumber(json["result"][0]["gasUsed"]);
    }).catch(err => console.log("Nft Mint Gas Spent Error: " + err));
}

async function getTokenTransferGasSpent(collectionAddress, tokenId) { // Implemented
    return await api.log.getLogs(collectionAddress, 0, 99999999, "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", "AND", undefined, "AND", undefined, "AND", web3.utils.padLeft(web3.utils.numberToHex(tokenId), 64))
    .then(json => {

        // Check if any transfer from any address different to address(0) has been made.
        let transfer = json["result"].filter(obj => obj["topics"][1] != '0x0000000000000000000000000000000000000000000000000000000000000000');
        if (transfer.length == 0 && json["result"].length > 0) transfer = json["result"];

        return web3.utils.hexToNumber(transfer[transfer.length - 1]["gasUsed"]);
    }).catch(err => console.log("Nft Transfer Gas Spent Error: " + err));
}

async function getContractCreationGasSpent(collectionAddress) { // Implemented
    return await api.account.txlist(collectionAddress, 0, 99999999,'asc')
    .then(json => {
        return json["result"][0]["gasUsed"];
    })
    .catch(err => console.log("Contract Creation Gas Spent Error: " + err)); 
}

async function getNftInfoByCollectionAndId(collectionAddress, id) {
    let sourceCode;
    let securityCounter = 0;
    let mintGas;
    let contractCreationGas;
    let transferGas;


    // Check Libraries in SourceCode
    // await getContractSourceCode(collectionAddress).then(res => {
    //    sourceCode = res;
    // });
    // SecurityLibraries.map(val => {
    //    sourceCode.includes(val)? securityCounter++ : securityCounter;
    // });
    // console.log(securityCounter == 0? "Using well-established libraries: F" : securityCounter == 1? "Using well-established libraries: E" : securityCounter == 2? "Using well-established libraries: D" : securityCounter == 3? "Using well-established libraries: C" : securityCounter == 4? "Using well-established libraries: B" : "Using well-established libraries: A");


    // Check if owner is a contract.
    // const isContract = await web3.eth.getCode(await contract.methods.owner().call());
    // console.log(isContract == "0x"? "Smart contract owner is multi-sig: F" : "Smart contract owner is multi-sig: A");

    
    // Gas Spent on Contract Creation.
    // contractCreationGas = await getContractCreationGasSpent(collectionAddress).catch(console.log);
    // console.log("Gas spent on smart contract creation: " + contractCreationGas);


    // Gas Spent on Nft Mint.
    // mintGas = await getTokenMintGasSpent(collectionAddress, id).catch(console.log);
    // console.log("Gas spent per mint: " + mintGas);


    // Gas Spent on Nft Transfer.
    transferGas = await getTokenTransferGasSpent(collectionAddress, id).catch(console.log);
    console.log("Gas spent per transfer: " + transferGas);
    
}

getNftInfoByCollectionAndId("0xbcE6D2aa86934AF4317AB8615F89E3F9430914Cb", 12834);